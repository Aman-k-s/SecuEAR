# -*- coding: utf-8 -*-
"""ml_model (1).ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r9zNDioO632VAvFQmaozCzsrk7nAGNKg

# Loading & Preprocessing Depth Map Images
"""

import cv2
import numpy as np

def preprocess_image(image_path):
    img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)  # Convert to grayscale
    img = cv2.resize(img, (128, 128))  # Resize for consistency
    img = img / 255.0  # Normalize (0-1 scale)
    return img

# Load the given images
image1 = preprocess_image("ear_depth_map.jpg")
image2 = preprocess_image("processed_ear.jpg")

print("✅ Images loaded and preprocessed.")

"""# Extracting Features from Ear Depth Maps"""

from skimage.feature import local_binary_pattern, hog

def extract_features(image):
    # LBP Feature Extraction
    lbp_features = local_binary_pattern(image, P=8, R=1, method="uniform").flatten()

    # HOG Feature Extraction
    hog_features = hog(image, pixels_per_cell=(8, 8), cells_per_block=(2, 2)).flatten()

    return np.hstack((lbp_features, hog_features))

# Extract features from both images
features1 = extract_features(image1)
features2 = extract_features(image2)

print("✅ Features extracted successfully.")

"""# Training an SVM Model"""

from sklearn.svm import SVC
import numpy as np

# Ensure balanced training data
X_train = np.array([features1, features2])
y_train = np.array([1, 0])  # Ensure both 1 (Authenticated) and 0 (Not Recognized) are present

# Train SVM Model
svm_model = SVC(kernel="linear", probability=True)
svm_model.fit(X_train, y_train)

# Predict on the same training data (since dataset is small)
y_pred = svm_model.predict(X_train)
print("Predictions:", y_pred)

y_pred = svm_model.predict(X_test)
print("✅ Model trained successfully with accuracy:", accuracy_score(y_test, y_pred))

"""# Saving the Model for Deployment"""

import joblib

# Save the trained model
joblib.dump(svm_model, "ear_auth_model.pkl")
print("✅ Model saved as 'ear_auth_model.pkl'")

"""# Building a Flask API for Authentication"""

# #from flask import Flask, request, jsonify
# import joblib
# import cv2
# import numpy as np

# app = Flask(__name__)

# # Load the trained model
# model = joblib.load("ear_auth_model.pkl")

# def preprocess_image(image_path):
#     """Load and preprocess image"""
#     img = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)
#     img = cv2.resize(img, (128, 128))
#     img = img / 255.0
#     return img

# @app.route("/authenticate", methods=["POST"])
# def authenticate():
#     """API endpoint to authenticate a user based on ear depth map"""
#     file = request.files["file"]
#     file_path = "temp.png"
#     file.save(file_path)

#     # Preprocess the uploaded image
#     img = preprocess_image(file_path)
#     features = extract_features(img).reshape(1, -1)

#     # Predict authentication status
#     result = model.predict(features)
#     confidence = model.predict_proba(features)[0][result[0]]  # Confidence Score

#     response = {
#         "message": "Authenticated" if result[0] == 1 else "Not Recognized",
#         "confidence": round(confidence * 100, 2)  # Convert to percentage
#     }

#     return jsonify(response)

# if __name__ == "__main__":
#     app.run(debug=True, port=5001)  # Change port to 5001





